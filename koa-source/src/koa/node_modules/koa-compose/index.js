'use strict'

/**
 * Expose compositor.
 */

module.exports = compose

/**
 * Compose `middleware` returning
 * a fully valid middleware comprised
 * of all those which are passed.
 *
 * @param {Array} middleware
 * @return {Function}
 * @api public
 */

function compose(middleware) {
  // 校验部分
  // 校验middleware是一个数组，否则抛出异常并警告
  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')
  // 校验middleware中每一项都是个函数
  for (const fn of middleware) {
    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')
  }

  /**
   * @param {Object} context
   * @return {Promise}
   * @api public
   */

  /* 把这个函数简化一下*/
  return function (ctx) {
    return dispatch(0)

    function dispatch(i) {
      let fn = middleware[i]
      if (!fn) return Promise.resolve();
      let next = function(){
        return dispatch(i + 1)
      }

      // console.log('fn:',fn.toString())
      // console.log('next:',next().toString())
      
      return fn(ctx, next)
    }
  }


  /* 这个匿名函数就是 fnMiddleware */
  return function (context, next) {
    // last called middleware #
    /* index的作用是防止在一个middleware中多次调用next方法；上面简写的方法中，是允许多次调用next的 */
    let index = -1
    return dispatch(0)
    function dispatch(i) {
      if (i <= index) return Promise.reject(new Error('next() called multiple times'))
      index = i
      let fn = middleware[i]
      // 这里的next函数就解释了为什么Koa的中间件调用是递归执行的，它递归调用了 dispatch 函数来遍历数组中的，同时，所有的中间件函数享有同一个 ctx
      if (i === middleware.length) fn = next
      if (!fn) return Promise.resolve()
      try {
        // 这里的 Promise.resolve(fn(..)) 帮助我们异步执行的中间件函数；所有的中间件函数享有同一个 ctx
        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));
      } catch (err) {
        return Promise.reject(err)
      }
    }
  }
}
